from django.shortcuts import render
from hm import templatenames
from hm.forms import LoginForm, RegisterForm, SelectServiceForm
from django.views.generic.base import TemplateView, RedirectView
from django.views.generic.edit import FormView
from hm import methods
from django.shortcuts import HttpResponseRedirect
from django.contrib.auth import login as auth_login
from django.contrib.auth.models import UserManager 
from hm.templatenames import MAX_THRESHOLD_DIST
from django.contrib.auth.models import User
from django.conf import settings
from hm.models import Driver, Mechanic

class IndexView(TemplateView):
	'''
	Backend Coding Completed. Javascript and beautification left.
	'''
	template_name = templatenames.INDEX	
	def get_context_data(self, **kwargs):
		context = super(IndexView, self).get_context_data(**kwargs)
		context = { 'user': self.request.user}
		return context

class LoginView(FormView):
	'''
	Backend Coding Completed. Javascript validation and beautification left.
	'''
	form_class = LoginForm
	template_name = templatenames.LOGIN
	def get_context_data(self, **kwargs):
		context = super(LoginView,self).get_context_data(**kwargs)
		return context
	def form_valid(self,form):
		redirect_to = settings.LOGIN_REDIRECT_URL
		if self.request.method == 'GET':	
			self.request.session['user_longitude'] = self.request.GET.get('long')
			self.request.session['user_latitude'] = self.request.GET.get('lati')
			if self.request.GET.get('long') == None:
				self.request.session['user_longitude'] = templatenames.GARBAGE_LOCATION
			if self.request.GET.get('lati') == None:
				self.request.session['user_latitude'] = templatenames.GARBAGE_LOCATION
        	auth_login(self.request, form.get_user())
        	if self.request.session.test_cookie_worked():
           		self.request.session.delete_test_cookie()
        	return HttpResponseRedirect(redirect_to)
		
	def form_invalid(self,form):
		return super(LoginView,self).form_invalid(form)
class RegisterView(FormView):
	'''
	Backend Coding Completed. Javascript validation and beautification left.
	'''
	form_class = RegisterForm
	template_name = templatenames.REGISTER
	success_url = settings.LOGIN_REDIRECT_URL
	def get_context_data(self, **kwargs):
		context = super(RegisterView,self).get_context_data(**kwargs)
		return context
	def form_valid(self,form):
		redirect_to = settings.LOGIN_REDIRECT_URL
		user = User.objects.create_user(
            	username 	= form.cleaned_data['username'],
            	password 	= form.cleaned_data['password'],
		email		= form.cleaned_data['username']
            	)
								
		if self.request.method == 'GET':	
			self.request.session['user_longitude'] = self.request.GET.get('long')
			self.request.session['user_latitude'] = self.request.GET.get('lati')
			if self.request.GET.get('long') == None:
				self.request.session['user_longitude'] = templatenames.GARBAGE_LOCATION
			if self.request.GET.get('lati') == None:
				self.request.session['user_latitude'] = templatenames.GARBAGE_LOCATION
		if form.cleaned_data['iamamechanic'] == True:
			mechanic = Mechanic(user 	= user, 
					    longitude   = self.request.session['user_longitude'],
					    latitude 	= self.request.session['user_latitude']							
					   )
			mechanic.save()			
		if form.cleaned_data['iamamechanic'] == False:
			driver = Driver( user 		= user,
					 longitude	= self.request.session['user_longitude'],
					 latitude	= self.request.session['user_latitude']				
					)
			driver.save()
		return HttpResponseRedirect(redirect_to)
	
	def form_invalid(self,form):
		
		return super(RegisterView, self).form_invalid(form)
	
class ConfirmLocationView(RedirectView):
	permanent=True
	url = templatenames.service_select
	template_name = templatenames.CONFIRM_LOCATION
	pattern_name = templatenames.pattern_select_service
	def get_redirect_url(self, *args, **kwargs):
		context = super(ConfirmLocationView,self).get_redirect_url(*args,**kwargs)
		if self.request.method == 'GET':	
			self.request.session['user_longitude'] = self.request.GET.get('long')
			self.request.session['user_latitude'] = self.request.GET.get('lati')
			if self.request.GET.get('long') == None:
				self.request.session['user_longitude'] = templatenames.GARBAGE_LOCATION
			if self.request.GET.get('lati') == None:
				self.request.session['user_latitude'] = templatenames.GARBAGE_LOCATION
			
		return context	

class SelectServiceView(FormView):
	
	form_class = SelectServiceForm
	template_name = templatenames.SELECT_SERVICE
	success_url = templatenames.url_search_mechanics
	def get_context_data(self, **kwargs):
		context = super(SelectServiceView,self).get_context_data(**kwargs)
		context = { 'user_lati':self.request.session.get('user_latitude'), 
			    'user_long':self.request.session.get('user_longitude'),
			    'form':SelectServiceForm
			}
 
		return context

	def form_valid(self,form):
		service = form.cleaned_data['service']
		
		self.request.session['service_selected'] = service
		return super(SelectServiceView, self).form_valid(form)

	def form_invalid(self,form):
		return super(SelectServiceView, self).form_invalid(form)



class SearchMechanicsView(RedirectView):
	permanent=True
	url = templatenames.user_waiting
	pattern_name = templatenames.search_mechanics
	def get_redirect_url(self, *args, **kwargs):
		context = super(SearchMechanicsView,self).get_redirect_url(*args,**kwargs)
		user_latitude = str(methods.location_caliberate(self.request.session.get('user_latitude')))
		user_longitude = str(methods.location_caliberate(self.request.session.get('user_longitude')))
		
		user_location = (float(user_latitude),float(user_longitude))
		max_threshold_dist = MAX_THRESHOLD_DIST
		MECHANIC_QUERY_LIST = methods.serialize_list(methods.searchNearbyMechanics(user_location, max_threshold_dist))
		
		if len(MECHANIC_QUERY_LIST) == 0:
			self.request.session['no_mechanics'] = 0
		else:
			self.request.session['mechanic_query_list'] = MECHANIC_QUERY_LIST
			self.request.session['no_mechanics'] = len(MECHANIC_QUERY_LIST)		
		return context	

class MechanicReceiveRequestView(TemplateView):
	template_name = templatenames.MECHANIC_SERVICE_REQUEST
	def  get_context_data(self, **kwargs):
		context = super(MechanicServiceRequestView,self).get_context_data(**kwargs)
		return context

class UserServiceRequestView(TemplateView):
	template_name = templatenames.USER_SERVICE_REQUEST
	def  get_context_data(self, **kwargs):
		context = super(UserServiceRequestView,self).get_context_data(**kwargs)
		return context
	
class ChatBoxView(TemplateView):
	template_name = templatenames.CHAT_BOX
	def get_context_data(self, **kwargs):
		context = super(ChatBoxView,self).get_context_data(**kwargs)
		return context

class PaymentGatewayView(FormView):
	
	template_name = templatenames.PAYMENT_GATEWAY
	def get_context_data(self, **kwargs):
		context = super(PaymentGateway,self).get_context_data(**kwargs)
		return context
	def form_valid(self,form):
		return super(PaymentGatewayView, self).form_valid(form)
	def form_invalid(self,form):
		return super(PaymentGatewayView, self).form_invalid(form)

class UserWaitingView(TemplateView):
	template_name = templatenames.USER_WAITING
	def get_context_data(self, **kwargs):
		context = super(UserWaitingView, self).get_context_data(**kwargs)
		context = { 	'mechanics':self.request.session.get('mechanic_query_list'),
				'ulat':self.request.session.get('user_latitude'), 
				'ulong':self.request.session.get('user_longitude'),
				'no_mechanics':(self.request.session.get('no_mechanics') == 0),
				'service_selected':self.request.session.get('service_selected')
				
		}	
			
		
		return context
